library ieee;
use ieee.std_logic_1164.all;

entity MulticycleControl is
         port(Opcodefield:in std_logic_vector(5 downto 0);
              clk : in std_logic ;
              
              NextStateReg :buffer std_logic_vector(3 downto 0);
              ALUOP,ALUSrcB :out std_logic_vector(1 downto 0);
              PCWrite,PCWriteCond,IorD,MemWrite,MemRead,IRWrite,Mem2Reg,PCSrc,RegWrite,RegDst,ALUSrcA:out std_logic);
end MulticycleControl;

architecture sample of MulticycleControl is
 

begin
  process (clk)
  begin
   if(clk'event and clk='1') then
		
          
			
            case NextStateReg is
            when "0000" =>
            	   ALUSrcA<='1';
				   ALUSrcB<="00";
				   ALUOP<="00";
				   PCSrc<='0';
				   PCWriteCond<='0'; 
				  

				   PCWrite<='0';
				   IorD<='0';
				   MemWrite<='0';
				   MemRead<='0';
				   IRWrite<='1';
				   Mem2Reg<='0';
				   RegWrite<='0';
				   RegDst<='0';
				     
				   NextStateReg<="1111";
				 
			      
               
               when"0001" =>
                  ALUSrcA<='0';
				  ALUSrcB<="11";
				  ALUOP<="00";
				  
				  PCWrite<='0';
				  PCWriteCond<='0';
				  IorD<='0';
				  MemWrite<='0';
				  MemRead<='0';
				  IRWrite<='0';
				  Mem2Reg<='0';
				  PCSrc<='0';
				  RegWrite<='0';
				  RegDst<='0';


				   
				    case Opcodefield is
					     when "101011" => 
					     NextStateReg <="0010";
					     when "100011" =>
					     NextStateReg <="0010";
					     when "000000" =>
                         NextStateReg <="0110";
					     when "000100" => 
					     NextStateReg <="1000";
					     when others =>
					     
					end case;
                when"0010" =>
                  ALUSrcA<='1';
				  ALUSrcB<="10";
				  ALUOP<="00";
				  
				  PCWrite<='0';
				  PCWriteCond<='0';
				  IorD<='0';
				  MemWrite<='0';
				  MemRead<='0';
				  IRWrite<='0';
				  Mem2Reg<='0';
				  PCSrc<='0';
				  RegWrite<='0';
				  RegDst<='0';
				  
			
				  				  
                  case Opcodefield is
			        when "101011"=>
                      NextStateReg <="0101";
				    when "100011"=> 
                      NextStateReg <="0011";
				    when others => 
				  end case;

				 when"0011" =>
				   MemRead<='1';
				   IorD<='1';
			
			       ALUSrcA<='0';
				   ALUSrcB<="00";
				   ALUOP<="00";
				   PCWrite<='0';
				   PCWriteCond<='0';
				   MemWrite<='0';
				   IRWrite<='0';
				   Mem2Reg<='0';
				   PCSrc<='0';
				   RegWrite<='0';
				   RegDst<='0';
				   
				   NextStateReg<="0100";
				
				 when"0100" =>
                   RegWrite<='1';
                   Mem2Reg<='1';
                   RegDst<='0';
                   
                   MemRead<='0';
				   IorD<='0';
				   ALUSrcA<='0';
				   ALUSrcB<="00";
				   ALUOP<="00";
				   PCWrite<='0';
				   PCWriteCond<='0';
				   MemWrite<='0';
				   IRWrite<='0';
				   PCSrc<='0';
                   
		 
                   
                   NextStateReg<="1111";
                 
                   
				 when "0101" =>
				   MemWrite<='1';
				   IorD<='1';
				   
				   ALUSrcA<='0';
				   ALUSrcB<="00";
				   ALUOP<="00";
				   PCWrite<='0';
				   PCWriteCond<='0';
				   
				   IRWrite<='0';
				   Mem2Reg<='0';
				   PCSrc<='0';
				   RegWrite<='0';
				   RegDst<='0';
				   MemRead<='0';
				
				   NextStateReg<="1111";
				
				 when "0110" =>
				   ALUSrcA<='1';
				   ALUSrcB<="00";
				   ALUOP<="10";
				   
				   PCWrite<='0';
				   PCWriteCond<='0';
				   IorD<='0';
				   MemWrite<='0';
				   MemRead<='0';
				   IRWrite<='0';
				   Mem2Reg<='0';
				   PCSrc<='0';
				   RegWrite<='0';
				   RegDst<='0';
				  
                   NextStateReg<="0111";
                  
				when "0111" =>
			       RegWrite<='1';
                   Mem2Reg<='0';
                   RegDst<='1';
                   
                   MemRead<='0';
				   IorD<='0';
				   ALUSrcA<='0';
				   ALUSrcB<="00";
				   ALUOP<="00";
				   PCWrite<='0';
				   PCWriteCond<='0';
				   MemWrite<='0';
				   IRWrite<='0';
				   PCSrc<='0';
				   
                   NextStateReg<="1111";
				 
				 when "1000" =>
				   ALUSrcA<='1';
				   ALUSrcB<="00";
				   ALUOP<="01";
				   PCSrc<='1';
				   PCWriteCond<='1'; 
				   
				   PCWrite<='0';
				   IorD<='0';
				   MemWrite<='0';
				   MemRead<='0';
				   IRWrite<='0';
				   Mem2Reg<='0';
				   RegWrite<='0';
				   RegDst<='0';
				    
				   NextStateReg<="1111";
				 
			    when others =>

			    MemRead<='1';
                  ALUSrcA<='0';
                  IorD<='0';
                  IRWrite<='1';
                  ALUSrcB<="01";
                  ALUOP<="00";
                  PCWrite<='1';
                  PCSrc<='0';
                  NextStateReg<="0001";
                 
                  PCWriteCond<='0';
                  MemWrite<='0';
                  Mem2Reg<='0';
                  RegWrite<='0';
                  RegDst<='0';
                 
			end case;
			
        
   end if;
  end process;
 
end sample;